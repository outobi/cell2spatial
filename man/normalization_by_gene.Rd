% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Query_method.R
\name{normalization_by_gene}
\alias{normalization_by_gene}
\title{Gene-wise Z-score Normalization}
\usage{
normalization_by_gene(
  expression_matrix,
  handle_zero_variance = TRUE,
  na_action = "fail"
)
}
\arguments{
\item{expression_matrix}{A numeric matrix with genes as rows and samples as columns.
Row names should be gene identifiers and column names should be sample identifiers.}

\item{handle_zero_variance}{Logical. If TRUE (default), genes with zero variance 
(constant expression across all samples) will be set to 0. If FALSE, these genes
will result in NaN values.}

\item{na_action}{Character string specifying how to handle missing values.
Options: "fail" (default, stop if NA found), "omit" (exclude NAs from calculations),
"zero" (replace NAs with 0 after normalization).}
}
\value{
A numeric matrix of the same dimensions as input, with each gene 
  normalized to have mean=0 and standard deviation=1 across samples.
}
\description{
Performs z-score normalization (standardization) for each gene across samples.
This transformation converts each gene's expression values to have mean=0 and sd=1
across all samples, following the formula: z = (x - mean)/sd
}
\details{
The function applies z-score normalization gene-wise (row-wise), which is useful
for spatial transcriptomics data where you want to compare relative expression
patterns of each gene across different regions or conditions.

The transformation formula for each gene i: z_i = (x_i - μ_i) / σ_i
where μ_i is the mean expression and σ_i is the standard deviation for gene i.
}
\examples{
# Create example expression data
set.seed(123)
expression_data <- matrix(rnorm(100*20, mean=5, sd=2), 
                         nrow=100, ncol=20)
rownames(expression_data) <- paste0("Gene_", 1:100)
colnames(expression_data) <- paste0("Sample_", 1:20)

# Apply gene-wise normalization
normalized_data <- normalization_by_gene(expression_data)

# Check that each gene now has mean~0 and sd~1
head(apply(normalized_data, 1, mean))  # Should be close to 0
head(apply(normalized_data, 1, sd))    # Should be close to 1

}
